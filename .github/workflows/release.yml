name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true
        type: string

jobs:
  create-release:
    runs-on: ubuntu-latest
    
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Extract version
      id: extract_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "version_number=${VERSION#v}" >> $GITHUB_OUTPUT
        
    - name: Generate changelog
      id: changelog
      run: |
        if [ -f CHANGELOG.md ]; then
          # Extract changelog for this version
          awk '/^## \[?'${{ steps.extract_version.outputs.version_number }}'\]?/{flag=1; next} /^## \[?[0-9]/{flag=0} flag' CHANGELOG.md > current_changelog.md
          echo "changelog_exists=true" >> $GITHUB_OUTPUT
        else
          echo "changelog_exists=false" >> $GITHUB_OUTPUT
          echo "No changelog available for this release." > current_changelog.md
        fi
        
    - name: Create Release
      id: create_release
      run: |
        # Read changelog content
        CHANGELOG_CONTENT=$(cat current_changelog.md)
        
        # Determine if prerelease
        if [[ "${{ steps.extract_version.outputs.version }}" == *"beta"* ]] || [[ "${{ steps.extract_version.outputs.version }}" == *"alpha"* ]]; then
          PRERELEASE="--prerelease"
        else
          PRERELEASE=""
        fi
        
        # Create release using GitHub CLI
        gh release create "${{ steps.extract_version.outputs.version }}" \
          --title "PureFeed Extension ${{ steps.extract_version.outputs.version }}" \
          --notes "$CHANGELOG_CONTENT" \
          $PRERELEASE
        
        # Get release info for outputs
        RELEASE_DATA=$(gh release view "${{ steps.extract_version.outputs.version }}" --json id,uploadUrl)
        echo "upload_url=$(echo $RELEASE_DATA | jq -r '.uploadUrl')" >> $GITHUB_OUTPUT
        echo "id=$(echo $RELEASE_DATA | jq -r '.id')" >> $GITHUB_OUTPUT
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-package:
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        
    - name: Extract version
      id: extract_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "version_number=${VERSION#v}" >> $GITHUB_OUTPUT
        
    - name: Install dependencies
      run: npm install
      
    - name: Build extension
      run: npm run build
      
    - name: Create package directory
      run: |
        mkdir -p packages/chrome-store
        
        # Copy ONLY essential extension files (no development files)
        cp manifest.json packages/chrome-store/
        cp popup.html packages/chrome-store/
        cp content-bundled.js packages/chrome-store/
        cp popup-bundled.js packages/chrome-store/
        cp config.json packages/chrome-store/
        cp -r icons packages/chrome-store/
        
        # Verify all required files are present
        echo "Checking required files..."
        for file in manifest.json popup.html content-bundled.js popup-bundled.js config.json; do
          if [ ! -f "packages/chrome-store/$file" ]; then
            echo "ERROR: Required file missing: $file"
            exit 1
          fi
        done
        echo "All required files present âœ“"
        
    - name: Create production ZIP for direct download
      run: |
        cd packages/chrome-store
        zip -r ../../purefeed-extension-v${{ steps.extract_version.outputs.version_number }}.zip .
        cd ../../
        
        # Create a generic latest version link
        cp purefeed-extension-v${{ steps.extract_version.outputs.version_number }}.zip purefeed-extension-latest.zip
        
    - name: Verify package
      run: |
        echo "ðŸ“¦ Production Package Contents:"
        unzip -l purefeed-extension-v${{ steps.extract_version.outputs.version_number }}.zip
        
        echo ""
        echo "Package Information:"
        ls -lh purefeed-extension-v${{ steps.extract_version.outputs.version_number }}.zip
        ls -lh purefeed-extension-latest.zip
        
        echo ""
        echo "Ready for direct download and browser installation!"
        
    - name: Upload Versioned Release Asset
      run: |
        gh release upload "${{ steps.extract_version.outputs.version }}" \
          "./purefeed-extension-v${{ steps.extract_version.outputs.version_number }}.zip" \
          --clobber
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload Latest Release Asset
      run: |
        gh release upload "${{ steps.extract_version.outputs.version }}" \
          "./purefeed-extension-latest.zip" \
          --clobber
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-release-notes:
    runs-on: ubuntu-latest
    needs: [create-release, build-and-package]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Extract version
      id: extract_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
  notify-completion:
    runs-on: ubuntu-latest
    needs: [create-release, build-and-package, update-release-notes]
    if: always()
    
    steps:
    - name: Release Status
      run: |
        if [ "${{ needs.build-and-package.result }}" = "success" ]; then
          echo "Release ${{ github.ref_name }} completed successfully!"
          echo "Production-ready extension package created"
          echo "Direct download link available for website integration"
          echo "âš¡ Ready for immediate user installation"
        else
          echo "Release ${{ github.ref_name }} failed!"
          exit 1
        fi
